version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - confluent

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker:29092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # webserver:
  #   image: apache/airflow:2.6.0-python3.9
  #   command: webserver
  #   entrypoint: ['/opt/airflow/script/entrypoint.sh']
  #   depends_on:
  #     - postgres
  #   environment:
  #     - LOAD_EX=n
  #     - EXECUTOR=Sequential
  #     - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  #     - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
  #   logging:
  #     options:
  #       max-size: 10m
  #       max-file: "3"
  #   volumes:
  #     - ./dags:/opt/airflow/dags
  #     - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
  #     - ./requirements.txt:/opt/airflow/requirements.txt
  #   ports:
  #     - "8080:8080"
  #   healthcheck:
  #     test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   networks:
  #     - confluent

  # scheduler:
  #   image: apache/airflow:2.6.0-python3.9
  #   depends_on:
  #     webserver:
  #       condition: service_healthy
  #   volumes:
  #     - ./dags:/opt/airflow/dags
  #     - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
  #     - ./requirements.txt:/opt/airflow/requirements.txt
  #   environment:
  #     - LOAD_EX=n
  #     - EXECUTOR=Sequential
  #     - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  #     - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
  #   command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"
  #   networks:
  #     - confluent

  # postgres:
  #   image: postgres:14.0
  #   environment:
  #     - POSTGRES_USER=airflow
  #     - POSTGRES_PASSWORD=airflow
  #     - POSTGRES_DB=airflow
  #   logging:
  #     options:
  #       max-size: 10m
  #       max-file: "3"
  #   networks:
  #     - confluent

  spark-master:
    build:
      context: .
      dockerfile: Dockerfile
    image: spark-image
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
      - "4040:4040"
    volumes:
      - .:/opt/workspace
    networks:
      - confluent

  spark-worker:
    image: spark-image
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077
    volumes:
      - .:/opt/workspace
    networks:
      - confluent

  cassandra_db:
    image: cassandra:latest
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    networks:
      - confluent

networks:
  confluent: